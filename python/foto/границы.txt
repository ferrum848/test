import operator
import random
import itertools
from itertools import groupby
from operator import itemgetter
from collections import Counter
from copy import deepcopy
import string
import textwrap
from array import *
import datetime
import time
import math
import cmath
# from datetime import datetime
from datetime import date, timedelta
import os
import numpy as np
import cv2

'''
image = cv2.imread("C:/Games/anaconda/work/imajes/ppp.jpg")
#a=np.random.randint(30, 300, size=(9, 2))
arr=np.array([[100,85],[350,150],[200,320],[40,175],[50,100]], dtype=np.int32)
print(image.shape)
ya=cv2.imread("C:/Games/anaconda/work/imajes/12.jpg")

mask = np.zeros(image.shape, dtype=np.uint8)
cv2.fillConvexPoly(mask, arr, (255, 255, 255))

b_channel, g_channel, r_channel = cv2.split(mask)
res_channels = cv2.split(image)
res = cv2.merge((res_channels[0], res_channels[1], res_channels[2], r_channel))
cv2.imwrite("test.png", res)

x_offset=430
y_offset=20
y1, y2 = y_offset, y_offset + res.shape[0]
x1, x2 = x_offset, x_offset + res.shape[1]
alpha_s = res[:, :, 3] / 255.0
alpha_l = 1.0 - alpha_s
for c in range(0, 3):
    ya[y1:y2, x1:x2, c] = (alpha_s * res[:, :, c] + alpha_l * ya[y1:y2, x1:x2, c])

cv2.imwrite("yaa.png", ya)

'''







#================================================================================================================
image = cv2.imread("C:/Games/anaconda/work/imajes/test.png")

def resize(img, height=800):
    rat = height / img.shape[0]
    return cv2.resize(img, (int(rat * img.shape[1]), height))

image=resize(image)
#увеличиваем и делаем в полутоне
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2.imshow("squar", image)
cv2.waitKey()
#уменьшаем шум и разглаживаем цвета
image = cv2.bilateralFilter(image, 9, 75, 75)
cv2.imshow("squar", image)
cv2.waitKey()
#делаем черно-белым и вычисляем оптимальный порог для маленьких участков
image=cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 115, 4)
cv2.imshow("squar", image)
cv2.waitKey()
#фильтр для очистки мелких деталей
image = cv2.medianBlur(image, 11)
cv2.imshow("squar", image)
cv2.waitKey()
#добавляем черную границу(НАФИГА???)
image = cv2.copyMakeBorder(image, 5, 5, 5, 5, cv2.BORDER_CONSTANT, value=[0, 0, 0])
cv2.imshow("squar", image)
cv2.waitKey()
#окончательно определяем границы,белые пиксели - контуры, черные - окружение
edges = cv2.Canny(image, 200, 250)
cv2.imshow("squar", edges)
cv2.waitKey()

#получаем контуры изображения
im, contours, hierarchy = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)


#начинается поиск нужного листа
#выделяем границы участка где есть наше изображение(5рх добавили...)
height = edges.shape[0]
width = edges.shape[1]
MAX_COUNTOUR_AREA = (width - 10) * (height - 10)
#рисунок заполняет по крайней мере полстраницы
maxAreaFound = MAX_COUNTOUR_AREA * 0.5
#контур страницы(5рх добавили...) ЗАЧЕМ ОН ТУТ НУЖЕН??? в 101 строке перезаписывается и до этого нигде не используется
pageContour = np.array([[5, 5], [5, height-5], [width-5, height-5], [width-5, 5]])
#идем через все контуры
for cnt in contours:
    #упрощаем контуры(???)
    perimeter = cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, 0.03 * perimeter, True)
#у страницы 4 выпуклых угла, размер страницы больше полустраницы
#Convexity - выпуклость
#contourArea - площадь внутри контура
    if (len(approx) == 4 and cv2.isContourConvex(approx) and maxAreaFound < cv2.contourArea(approx) < MAX_COUNTOUR_AREA):
        maxAreaFound = cv2.contourArea(approx)# зачем эта строка, после maxAreaFound нигде не используется
        pageContour = approx

#================================
def fourCornersSort(pts):
    #сортировка углов
    #разность и сумма x y
    diff = np.diff(pts, axis=1)
    summ = pts.sum(axis=1)
    #у левой верхней точки мин сумма, правой нижней мах сумма...
    # np.argmin() returns INDEX of min
    return np.array([pts[np.argmin(summ)],
                     pts[np.argmax(diff)],
                     pts[np.argmax(summ)],
                     pts[np.argmin(diff)]])
def contourOffset(cnt, offset):
    #внешний контур
    #сложение матриц
    cnt += offset
    # if value < 0 => replace it by 0
    cnt[cnt < 0] = 0
    return cnt
#сортировка и установка углов
pageContour = fourCornersSort(pageContour[:, 0])
pageContour = contourOffset(pageContour, (-5, -5))
#пересчет на изначальный размер(?)
sPoints = pageContour.dot(image.shape[0] / 800)
#используем евклидово расстояние
#рассчет мах длины и ширины
height = max(np.linalg.norm(sPoints[0] - sPoints[1]),np.linalg.norm(sPoints[2] - sPoints[3]))
width = max(np.linalg.norm(sPoints[1] - sPoints[2]),np.linalg.norm(sPoints[3] - sPoints[0]))
#создаем нужные точки
tPoints = np.array([[0, 0],
                    [0, height],
                    [width, height],
                    [width, 0]], np.float32)
# getPerspectiveTransform() needs float32
if sPoints.dtype != np.float32:
    sPoints = sPoints.astype(np.float32)
#getPerspectiveTransform - рассчет перспективной формы по переданным координатам
#warpPerspective - добавление рассчитанной формы на изображение
M = cv2.getPerspectiveTransform(sPoints, tPoints)
newImage = cv2.warpPerspective(image, M, (int(width), int(height)))
#cv2.imwrite("folder/resultImage.jpg", cv2.cvtColor(newImage, cv2.COLOR_BGR2RGB)) перевод изображения обратно в BGR
cv2.imshow("squar", newImage)
cv2.waitKey()
#================================================================================================
'''

image = cv2.imread("C:/Games/anaconda/work/imajes/12345.jpg")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (3, 3), 0)
cv2.imshow("squar", gray)
cv2.waitKey()
edged = cv2.Canny(gray, 10, 250)
cv2.imshow("squar", edged)
cv2.waitKey()
# создайте и примените закрытие
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)
cv2.imshow("squar", closed)
cv2.waitKey()
# найдите контуры в изображении и подсчитайте количество книг
cnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[1]
total = 0
# цикл по контурам
for c in cnts:
    # аппроксимируем (сглаживаем) контур
    peri = cv2.arcLength(c, True)
    print(peri)
    approx = cv2.approxPolyDP(c, 0.02 * peri, True)
#    if peri>1000:
#        cv2.drawContours(image, [approx], -1, (0, 255, 0), 4)


    # если у контура 4 вершины, предполагаем, что это книга
    if len(approx) == 4:
        cv2.drawContours(image, [approx], -1, (0, 255, 0), 4)
        total += 1

print("Я нашёл {0} книг на этой картинке".format(total))

cv2.imshow("squar", image)
cv2.waitKey()
'''


