import random
import numpy as np
import cv2

#функция для добавления шумов(честно скачана из гугла)))
def sp_noise(image,prob):
    output = np.zeros(image.shape,np.uint8)
    thres = 1 - prob
    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            rdn = random.random() #число от 0 до 1
            if rdn < prob:
                output[i][j] = 0
            elif rdn > thres:
                output[i][j] = 255
            else:
                output[i][j] = image[i][j]
    return output

#начало проги!!!
#делаем фон(сразу с альфа каналом)
fon_color=random.randint(70,130)
fon = (np.ones((512,512,4), dtype=np.uint8))*fon_color
#альфа канал делаем 255 - непрозрачным
b_channel, g_channel, r_channel,a_ch = cv2.split(fon)
a_chh=(a_ch//fon_color)*255
fon = cv2.merge((b_channel, g_channel, r_channel, a_chh))
#маски для исходника и черно-белого аналога
mask = np.ones((512,512,4), dtype=np.uint8)
mask1 = np.ones((512,512,3), dtype=np.uint8)
#делаем рандомные кривые
for i in range(5):
    color_line=random.randint(0,60)
    thick=random.randint(1,12)
    arr=np.random.randint(0, 512, size=(5, 2))
    cv2.polylines(mask,[arr], False, (color_line,color_line,color_line), thickness=thick, lineType=4, shift=0)
    cv2.polylines(mask1, [arr], False, (255, 255, 255), thickness=thick, lineType=4, shift=0)
    b_channel, g_channel, r_channel, a_ch = cv2.split(mask)
    res = cv2.merge((b_channel, g_channel, r_channel, b_channel))
    x_offset = 0
    y_offset = 0
    y1, y2 = y_offset, y_offset + res.shape[0]
    x1, x2 = x_offset, x_offset + res.shape[1]
    alpha_s = res[:, :, 3] / 255.0
    alpha_l = 1.0 - alpha_s
    for c in range(0, 3):
        fon[y1:y2, x1:x2, c] = (alpha_s * res[:, :, c] + alpha_l * fon[y1:y2, x1:x2, c])

#случайный шум
noise=random.uniform(0,0.03)
fon=sp_noise(fon,noise)

# размываем Blur-ом
fon = cv2.GaussianBlur(fon, (3, 3), 2)

cv2.imwrite("eye.png", fon)
cv2.imwrite("eye_mask.png", mask1)
