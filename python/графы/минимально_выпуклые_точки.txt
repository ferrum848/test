#===========================================================
def rotate(A,B,C):
  return (B[0]-A[0])*(C[1]-B[1])-(B[1]-A[1])*(C[0]-B[0])
#===========================================================


def grekhem(n):
    fon_color=255
    fon = (np.ones((500,650,3), dtype=np.uint8))*fon_color

    arr = [[0 for y in range(2)] for x in range(n)]

    for i in range(len(arr)):
        x=random.randint(10,200)
        y = random.randint(100,300)
        arr[i][0]=x
        arr[i][1]=y
        cv2.line(fon,(x,y),(x,y),(0,0,0), thickness=2, lineType=8, shift=0)
    print(arr)

    P=[]
    for i in range(len(arr)):
        P.append(i)
    #самая левая точка
    for i in range(1,len(arr)):
        if arr[P[i]][0]<arr[P[0]][0]:
          P[i], P[0] = P[0], P[i]
    #сортировка по степени левизны от начальной
    for i in range(2,len(arr)):
        j = i
        while j>1 and (rotate(arr[P[0]],arr[P[j-1]],arr[P[j]])>0):
          P[j], P[j-1] = P[j-1], P[j]
          j -= 1

    mass=[]
    for i in P:
        mass.append(arr[i])
    print(mass)
    for i in mass:
        i[0]=i[0]+200

    for i in range(len(mass)-1):
        cv2.line(fon, tuple(mass[i]), tuple(mass[i+1]), (0, 255, 0), thickness=2, lineType=8, shift=0)
    cv2.line(fon, tuple(mass[len(mass)-1]), tuple(mass[0]), (0, 255, 0), thickness=2, lineType=8, shift=0)

    #определение минимально выпуклых точек
    S=[P[0],P[1]]
    for i in range(2, len(arr)):
        while rotate(arr[S[-2]], arr[S[-1]], arr[P[i]]) > 0:
            del S[-1]
        S.append(P[i])

    mass=[]
    for i in S:
        mass.append(arr[i])
    for i in mass:
        i[0]=i[0]+200

    for i in range(len(mass)-1):
        cv2.line(fon, tuple(mass[i]), tuple(mass[i+1]), (0, 0, 255), thickness=2, lineType=8, shift=0)
    cv2.line(fon, tuple(mass[len(mass)-1]), tuple(mass[0]), (0, 0, 255), thickness=2, lineType=8, shift=0)

    cv2.imshow("res", fon)
    cv2.waitKey()

grekhem(12)
