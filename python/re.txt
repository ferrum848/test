import sys
import re

"""Baby Names exercise

Define the extract_names() function below and change main()
to call it.

For writing regex, it's nice to include a copy of the target
text for inspiration.

Here's what the html looks like in the baby.html files:
...
<h3 align="center">Popularity in 1990</h3>
....
<tr align="right"><td>1</td><td>Michael</td><td>Jessica</td>
<tr align="right"><td>2</td><td>Christopher</td><td>Ashley</td>
<tr align="right"><td>3</td><td>Matthew</td><td>Brittany</td>
...

Suggested milestones for incremental development:
 -Extract the year and print it
 -Extract the names and rank numbers and just print them
 -Get the names data into a dict and print it
 -Build the [year, 'name rank', ... ] list and print it
 -Fix main() to use the extract_names list
"""


res=[]
baby_file = 'c:/Games/anaconda/google-python-exercises/babynames/baby1990.html'
with open(baby_file, 'r') as f:
    text = f.read()

year = re.search(r'(in )(\d\d\d\d)', text)
res.append(year.group(2))
name_rank = re.findall(r'<td>(\d+)</td><td>(\w+)</td><td>(\w+)</td>', text)
print(name_rank)
for i in name_rank:
    res.append(i[3] + ' ' + i[1])
    res.append(i[5] + ' ' + i[1])
res = sorted(res, key=lambda res: res[:])
print(res)

slovar = {}
for i in res[1:]:
    temp = i.split(' ')
    slovar[temp[0]] = temp[1]
#print(slovar)



def extract_names(filename):
    res = []
    with open(filename, 'r') as f:
        text = f.read()

    year = re.search(r'(in )(\d\d\d\d)', text)
    res.append(year.group(2))
    name_rank = re.findall(r'(<td>)(\d+)(</td><td>)(\w+)(</td><td>)(\w+)(</td>)', text)

    for i in name_rank:
        res.append(i[3] + ' ' + i[1])
        res.append(i[5] + ' ' + i[1])
    res = sorted(res, key=lambda res: res[:])

    """
    Given a file name for baby.html, returns a list starting with the year string
    followed by the name-rank strings in alphabetical order.
    ['2006', 'Aaliyah 91', Aaron 57', 'Abagail 895', ' ...]
    """

    return res


def main():
    # This command-line parsing code is provided.
    # Make a list of command line arguments, omitting the [0] element
    # which is the script itself.
    args = sys.argv[1:]

    if not args:
        print('usage: [--summaryfile] file [file ...]')
        sys.exit(1)

    # Notice the summary flag and remove it from args if it is present.
    summary = False
    if args[0] == '--summaryfile':
        summary = True
        del args[0]

    extract_names(args[0])
    # For each filename, get the names, then either print the text output
    # or write it to a summary file


if __name__ == '__main__':
    main()
